#include <GL/glut.h>
#include <stdlib.h>
#include <stdlib.h>
#include <math.h>

static GLfloat spin = 0.0;
static float	tx	=  0.0;
static float	ty	=  0.0;

int r , g , b ;


void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    int x1 = -25, y1 = -25, x2 = 25, y2 = 25;


	glPushMatrix();

	glRotatef(spin, 0.0, 0.0, 1.0);
	//glColor3f(1.0, 1.0, 1.0);
	glTranslatef(tx,ty,0);

    //spinning square
	for(int i = 0; i < 7; i++){

        if (i ==0 ){
            r = g = b =1;
        }

        else if (i == 1){
                x1 += 5;
                y1 += 5;
                x2 -= 5;
                y2 -= 5;
                r = g = b =0;

        }
        else if(i == 2){
                x1 += 10;
                y1 += 10;
                x2 -= 10;
                y2 -= 10;
                r = g = b =1;

        }
        else if(i == 3){
                x1 = -25;
                y1 = -25;
                x2 = -35;
                y2 = -35;
                r = g = b =0;

        }
        else if(i == 4){
                x1 = -25;
                y1 = 25;
                x2 = -35;
                y2 = 35;
                r = g = b =0;

        }
        else if(i == 5){
                x1 = 25;
                y1 = 25;
                x2 = 35;
                y2 = 35;
                r = g = b =0;

        }
        else if(i == 6){
                x1 = 25;
                y1 = -25;
                x2 = 35;
                y2 = -35;
                r = g = b =0;

        }

        glColor3f(r , g, b);
        glRectf(x1,y1,x2,y2);
	}

    glPopMatrix();

    //rest of four diagonal squares
    for (int k = 0; k < 5; k++){

        if(k == 1){
            x1 = 100, y1 = 100, x2 = 90, y2 = 90;
        }
        else if (k == 2){
            x1 = 100, y1 = -100, x2 = 90, y2 = -90;

        }
        else if (k == 3){
            x1 = -100, y1 = -100, x2 = -90, y2 = -90;

        }
        else{
            x1 = -100, y1 = 100, x2 = -90, y2 = 90;

        }

        for(int i =0; i< 5; i++){
                if (i % 2 == 0){
                    r = g = b = 0;

                }
                else{
                    r = g = b = 1;

                }

                glColor3f(r, g, b);
                glRectf(x1,y1,x2,y2);

                if(k == 1){
                    x1 -= 10;
                    y1 -= 10;
                    x2 -= 10;
                    y2 -= 10;
                }
                else if(k == 2){
                    x1 -= 10;
                    y1 += 10;
                    x2 -= 10;
                    y2 += 10;
                }
                else if(k == 3){
                    x1 += 10;
                    y1 += 10;
                    x2 += 10;
                    y2 += 10;
                }
                else{
                    x1 += 10;
                    y1 -= 10;
                    x2 += 10;
                    y2 -= 10;

                }

            }

    }



	glFlush();
}

void spinDisplay_left(void)
{
   spin = spin + 1;
   if (spin > 360.0)
      spin = spin - 360.0;
   glutPostRedisplay();
}

void spinDisplay_right(void)
{
   spin = spin - 1;
   if (spin > 360.0)
      spin = spin - 360.0;
   glutPostRedisplay();
}


void init(void)
{
	glClearColor (0, 0.5, 0.5, 0.0);
	glOrtho(-100.0, 100.0, -100.0, 100.0, -1.0, 1.0);
}


void my_keyboard(unsigned char key, int x, int y)
{

	switch (key) {

		case 'l':
			spinDisplay_left();
			break;

		case 'r':
			spinDisplay_right();
			break;


		case 's':
			 glutIdleFunc(NULL);
			 break;

	  default:
			break;
	}
}

void spe_key(int key, int x, int y)
{

	switch (key) {

		case GLUT_KEY_LEFT:
				tx -=5;
				glutPostRedisplay();
				break;

			//spinDisplay_left();
			//break;

		case GLUT_KEY_RIGHT:
				tx +=5;
				glutPostRedisplay();
				break;

			//spinDisplay_right();
			//break;

		case GLUT_KEY_DOWN:
				ty -=5;
				glutPostRedisplay();
				break;

			//spinDisplay_left();
			//break;

		case GLUT_KEY_UP:
				ty +=5;
				glutPostRedisplay();
				break;

	  default:
			break;
	}
}


void my_mouse(int button, int state, int x, int y)
{
   switch (button) {
      case GLUT_LEFT_BUTTON:
         if (state == GLUT_DOWN)
            glutIdleFunc(spinDisplay_left);
         break;
      case GLUT_MIDDLE_BUTTON:
      case GLUT_RIGHT_BUTTON:
         if (state == GLUT_DOWN)
			glutIdleFunc(spinDisplay_right);
          break;
      default:
         break;
   }
}


int main()
{
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize (700, 600);
	glutInitWindowPosition (100, 100);
	glutCreateWindow ("Transformation");
	init();
    glutDisplayFunc(display);
	glutKeyboardFunc(my_keyboard);
	glutSpecialFunc(spe_key);
	glutMouseFunc(my_mouse);
	glutMainLoop();
	return 0;
}

//krishno dey
